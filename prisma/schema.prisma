
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
        
model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  password           String
  role               Role
  province           String?
  district           String?
  sector             String?
  cell               String?
  village            String?
  adminstrationScope AdminstrationScope?
  complaints         Complaint[]
  responses          Response[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  refreshTokens      RefreshToken[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Complaint {
  id          String          @id @default(uuid())
  title       String
  description String
  status      ComplaintStatus @default(PENDING)
  citizen     User            @relation(fields: [citizenId], references: [id])
  citizenId   String
  responses   Response[]
  images      Image[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Response {
  id          String    @id @default(uuid())
  message     String
  complaint   Complaint @relation(fields: [complaintId], references: [id])
  complaintId String
  responder   User      @relation(fields: [responderId], references: [id])
  responderId String
  createdAt   DateTime  @default(now())
}

model Image {
  id          String    @id @default(uuid())
  url         String
  complaint   Complaint @relation(fields: [complaintId], references: [id], onDelete: Cascade)
  complaintId String
  createdAt   DateTime  @default(now())
}

enum Role {
  CITIZEN
  ADMIN
  LEADER
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum AdminstrationScope {
  PROVINCE
  DISTRICT
  SECTOR
  CELL
  VILLAGE
}
